import logging
from contextlib import asynccontextmanager

import PIL
from PIL import Image
import numpy as np
import torch
import uvicorn
from fastapi import FastAPI, UploadFile
from pydantic import BaseModel, field_validator
from utils.funcs import *
from io import BytesIO


logger = logging.getLogger("uvicorn.info")


# class ImageInput(BaseModel):
#     image: Image
#     model_config = {
#         "arbitrary_types_allowed": True  # üëà –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–µ—à–∞–µ—Ç —Ç–≤–æ—é –æ—à–∏–±–∫—É
#     }


class ImageResponse(BaseModel):
    mask: str
    masked_image: str
    model_config = {
        "arbitrary_types_allowed": True  # üëà –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–µ—à–∞–µ—Ç —Ç–≤–æ—é –æ—à–∏–±–∫—É
    }

    # # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è mask
    # @field_validator("mask", mode="before")
    # @classmethod
    # def validate_mask(cls, v):
    #     return cls._to_image(v, "mask")

    # # –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è masked_image
    # @field_validator("masked_image", mode="before")
    # @classmethod
    # def validate_masked_image(cls, v):
    #     return cls._to_image(v, "masked_image")

    # @staticmethod
    # def _to_image(v, field_name: str):
    #     """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç PIL.Image.Image"""
    #     if isinstance(v, Image.Image):
    #         return v

    #     if isinstance(v, (bytes, bytearray)):
    #         try:
    #             return Image.open(BytesIO(v))
    #         except Exception as e:
    #             raise ValueError(
    #                 f"–ü–æ–ª–µ '{field_name}': –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}"
    #             )

    #     if isinstance(v, str):
    #         try:
    #             return Image.open(v)
    #         except Exception as e:
    #             raise ValueError(f"–ü–æ–ª–µ '{field_name}': –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")

    #     raise TypeError(
    #         f"–ü–æ–ª–µ '{field_name}': –æ–∂–∏–¥–∞–µ—Ç—Å—è PIL.Image.Image, bytes –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"
    #     )


class TextInput(BaseModel):
    text: str


class TextResponse(BaseModel):
    label: str
    prob: float


unet_model = None
rubert_model = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    global unet_model
    global rubert_model
    # –ó–∞–≥—Ä—É–∑–∫–∞ UNet –º–æ–¥–µ–ª–∏
    unet_model = load_unet()
    logger.info("UNet model loaded")
    # –ó–∞–≥—Ä—É–∑–∫–∞ RuBert –º–æ–¥–µ–ª–∏
    rubert_model = load_rubert_cls()
    logger.info("RuBert model loaded")
    yield
    # –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    del unet_model, rubert_model


app = FastAPI(lifespan=lifespan)


@app.get("/")
def return_info():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–≤–∏–µ
    """
    return "–ü—Ä–∏–≤–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!"


@app.post("/clf_post")
def clf_post(input_json: TextInput):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ, –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å.
    """
    pred, prob = rubert_prediction(input_json.text, rubert_model)
    response = TextResponse(label=pred, prob=prob)
    return response


@app.post("/segment_image")
async def segment_image(file: UploadFile):
    # async def segment_image(file: ImageInput):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –ª–µ—Å–∞ –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö)
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, —Å–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å–∫—É —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π
    """

    img = Image.open(BytesIO(await file.read()))
    mask, combined_img = predict_image(unet_model, img)
    response = ImageResponse(
        mask=pil_to_base64(mask), masked_image=pil_to_base64(combined_img)
    )
    return response


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ localhost —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Uvicorn
    # –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: python your/path/api/main.py
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
